// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-montara/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/montara/tree/LICENSE
#divert <fpp>
namespace app::service::options {
  //
  // The options parser.
  //
  // The lifetime of the Configuration (cfg) must be longer than the Parser.
  // The lifetime of the Specification (spec) must be longer than the Parser.
  //
  // Usage:
  //
  //   auto spec = Specification{};
  //   auto parser = Parser{cfg, spec};
  //   auto parsed = parser.parse(args);
  //   if (ok(parsed)) {
  //     ...etc...
  //   }
  //
  class Parser;
}
#endiv
#divert <hpp>
#import tunitas.app.options.Args
#import app.service.Configuration
#import app.service.options.Specification
#import options.longish.Step
#import std.filesystem.path
#import std.string
#import std.uint16_t
class app::service::options::Parser {
public:
  inline Parser(Configuration &modified, Specification const &);
  // disallow temporaries in places where the lifetimes matter
  inline Parser(Configuration const &, Specification &&) = delete;
  inline Parser(Configuration &&, Specification const &) = delete;
  struct Result;
  auto parse([[inout]] Args &) -> Result;
protected:
  Configuration &cfg;
  Specification const &specification;
  using Step = ::options::longish::Step;
  inline auto get_port(Step const &) -> std::uint16_t;
  inline auto get_engine(Step const &) -> std::string;
  inline auto get_filepath(Step const &) -> std::filesystem::path;
};
#entail app.service.options.Parser.Result
#endiv
#divert <ipp>
#import app.service.options.Specification
app::service::options::Parser::Parser(Configuration &modified, Specification const &specification)
  : cfg{modified}
  , specification{specification}
{ }
#import app.exception.Quitting
#import tunitas.app.options.get_identifier
auto app::service::options::Parser::get_engine(Step const &step) -> std::string {
  return tunitas::app::options::get_identifier<exception::Quitting>(cfg, step, "storage engine name");
}
#import tunitas.app.options.get_filepath
auto app::service::options::Parser::get_filepath(Step const &step) -> std::filesystem::path {
  return tunitas::app::options::get_filepath<exception::Quitting>(cfg, step, "pid file");
}
#import tunitas.app.options.get_port
auto app::service::options::Parser::get_port(Step const &step) -> std::uint16_t {
  return tunitas::app::options::get_port<exception::Quitting>(cfg, step, "service port");
}
#endiv
#divert <cpp>
#import app.exception.Quitting
#import app.exception.Version
#import app.service.exception.Usage
#import app.service.options.Parser.Result
#import app.service.options.indicator.constants
#import options.longish.Getter
#import options.longish.Step
auto app::service::options::Parser::parse(Args &args) -> Result {
  using namespace ::options::longish;
  Getter getter{specification.shortish, specification.longish, args};
  for (Step step=getter(); more(step); step=getter()) {
    namespace oi = indicator;
    switch (code(step)) {
    case oi::CHR_h:
    case oi::USAGE_SUBCOMMAND:
      throw exception::Usage{cfg.NAME};
    case oi::CHR_V:
    case oi::VERSION_SUBCOMMAND:
      throw exception::Version{cfg.NAME};
    case oi::CHR_b:
    case oi::BACKGROUND_MODE:
      cfg.foreground_mode = false;
      break;
    case oi::CHR_d:
    case oi::DEBUG_MODE:
      cfg.debug_mode = true;
      break;
    case oi::CHR_f:
    case oi::FOREGROUND_MODE:
      cfg.foreground_mode = true;
      break;
    case oi::CHR_q:
    case oi::QUIET_MODE:
      cfg.quiet_mode = true;
      break;
    case oi::CHR_P:
    case oi::EMIT_PID:
      // Without a pidfile, this will go to std::cerr
      cfg.emit_pid = true;
      break;
    case oi::CHR_p:
    case oi::SERVICE_PORT:
      cfg.port = get_port(step);
      break;
    case oi::PID_FILEPATH:
      cfg.emit_pid = true;
      cfg.pid_filepath = get_filepath(step);
      break;
    case oi::CHR_e:
    case oi::STORAGE_ENGINE:
      cfg.storage_engine = get_engine(step);
      break;
    case oi::CHR_v:
    case oi::VERBOSE_MODE:
      cfg.verbose_mode = true;
      break;
    case oi::CHR_w:
    case oi::WARNINGS_MODE:
      cfg.warning_mode = true;
      break;
    case oi::CHR_y:
    case oi::DRYRUN_MODE:
      cfg.dry_run_mode = true;
      break;
    case oi::MISSING:
      error(cfg) << "missing value for " << word_in_error(step) << '\n';
      throw exception::Quitting{cfg.NAME, sys::exits::CONFIG};
    case oi::UNKNOWN:
      error(cfg) << "unknown option " << word_in_error(step) << '\n';
      throw exception::Quitting{cfg.NAME, sys::exits::CONFIG};
    default:
      // This is a programmer error (reasonably it is a logic_error) because some option from the argv line wasn't configured.
      // It is also substantially untestable in a correctly configured system.
      error(cfg) << "unconfigured option '" << char(code(step)) << "'\n";
      throw exception::Quitting{cfg.NAME, sys::exits::SOFTWARE};
    }
  }
  auto const SUCCESS = true;
  return Result{SUCCESS, getter.begin(), getter.end()};
}
#endiv
