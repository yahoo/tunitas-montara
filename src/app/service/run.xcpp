// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2018-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-montara/blob/master/LICENSE for terms.
#divert <hpp>
#import app.service.Configuration
namespace app::service {
  //
  // Run the service
  // There is no termination (except by SIGTERM)
  //
  // Usage:
  //
  //   Configuration cfg{...};
  //   Specification specification{...};
  //   auto parser = Parser{cfg, specification};
  //   auto parsed = parser.parse(Args{c, v});
  //   if (ok(parsed)) {
  //     throw Quitting{cfg.NAME};
  //   }
  //   run(cfg);
  //   return sys::exits::OK;
  //
  auto run(Configuration const &) -> void;
}
#endiv
#divert <cpp>
#import app.service.constants
#import app.service.defaults
#import app.service.Pidfile
#import app.service.Quitting
#import httpserver.Webserver
#import httpserver.Create_Webserver
namespace httpserver { using Service = Webserver; namespace service { using Create = httpserver::Create_Webserver; } }
#import std.boolalpha
#import std.cout
#import std.cerr
#import std.exception
#import tunitas.app.exception.Generic
#import tunitas.montara.endpoint.Consent
#import tunitas.montara.endpoint.Consent_CreateWithArray
#import tunitas.montara.endpoint.Consent_CreateWithList
#import tunitas.montara.endpoint.Consent_FindIdentifiersByEntity
#import tunitas.montara.endpoint.Consent_Identifier
#import tunitas.montara.endpoint.Consent_RevokeWithArray
#import tunitas.montara.endpoint.Consent_RevokeWithList
#import tunitas.montara.endpoint.Transfer
#import tunitas.montara.endpoint.Transfer_CreateWithArray
#import tunitas.montara.endpoint.Transfer_CreateWithList
#import tunitas.montara.endpoint.Transfer_FindByConsentIdentifier
#import tunitas.montara.endpoint.Transfer_Identifier
#import tunitas.montara.endpoint.Subscription
#import tunitas.montara.endpoint.Subscription_FindByEntity
#import tunitas.montara.endpoint.Subscription_Identifier
#import tunitas.montara.storage.factory
#import tunitas.montara.storage.Configuration
#import want.sys.posix.daemon
#include <signal.h>
auto app::service::run(Configuration const &cfg) -> void {
  signal(SIGPIPE, SIG_IGN); // not checking the return code ... hope it worked

  namespace endpoint = tunitas::montara::endpoint;
  namespace storage = tunitas::montara::storage;
  httpserver::Service service{[&cfg]() {
        httpserver::service::Create specification;
        using namespace constants::server;
	auto with_port = cfg.port.value_or(defaults::SERVICE_PORT);
	debug(cfg) << "port=" << with_port << '\n';
        specification.debug();
        specification.use_ipv6().start_method(METHOD).max_threads(THREADS);
        specification.regex_checking();
	specification.port(with_port);
        return std::move(specification);
      }()};
#warning [[FIXTHIS]] drop privileges

  auto engine = [&cfg]() {
    auto storage_name = cfg.storage_engine.value_or(defaults::STORAGE_ENGINE);
    debug(cfg) << "engine=" << storage_name << '\n';
    auto ordered = storage::factory().order(storage_name);
    auto const could_not = [&cfg, &storage_name](char const *verb, std::error_code ec) {
      std::cerr << "error: could not " << verb << " storage engine '" << /*[[FIXTHIS]] format::q(...)*/ storage_name << "' because " << ec.message() << '\n';
      throw Quitting{cfg.NAME, sys::exits::UNAVAILABLE};
    };
    if (!ok(ordered)) {
      could_not("acquire", error_code(ordered));
    }
    auto builder = value(std::move(ordered));
    storage::Configuration configuration; // [[FIXTHIS]] load up some configuration values from service::Configuration
    auto built = builder->build(configuration);
    if (!ok(built)) {
      could_not("build", error_code(ordered));
    }
    return value(std::move(built));
  }();

  try {
    Pidfile pidfile{cfg.pid_filepath, cfg.emit_pid.value_or(defaults::EMIT_PID)};
    pidfile.manual();
    auto foreground_mode = cfg.foreground_mode.value_or(defaults::FOREGROUND_MODE);
    debug(cfg) << "foreground mode = " << std::boolalpha << foreground_mode << '\n';
    if (!foreground_mode) {
      using namespace want::sys::posix;
      auto ized = daemon(Chdir::YES, Close::YES);
      if (!ok(ized)) {
	error(cfg) << "could not daemonize because " << error_code(ized).message() << '\n';
	throw Quitting{cfg.NAME, sys::exits::FAIL};
      }
    }
    pidfile.emit();
    pidfile.close();
  } catch (tunitas::app::exception::Generic const &e) {
    throw;
  } catch (std::exception const &e) {
    error(cfg) << "failed to write the pid file " << cfg.pid_filepath.value_or("stderr") << " because " << e.what() << '\n';
    throw Quitting{cfg.NAME, sys::exits::FAIL};
  }

  auto const FAMILY_URL_SENSE = false;
  endpoint::Consent consent{*engine->consent};
  service.register_resource("/consent", &consent, FAMILY_URL_SENSE);

  endpoint::Consent_CreateWithArray consent_createWithArray{*engine->consent};
  service.register_resource("/consent/createWithArray", &consent_createWithArray, FAMILY_URL_SENSE);

  endpoint::Consent_CreateWithList consent_createWithList{*engine->consent};
  service.register_resource("/consent/createWithList", &consent_createWithList, FAMILY_URL_SENSE);

  endpoint::Consent_FindIdentifiersByEntity consent_findIdentifiersByEntity{*engine->consent};
  service.register_resource("/consent/findIdentifiersByEntity", &consent_findIdentifiersByEntity, FAMILY_URL_SENSE);
  // the pesky aliases
  service.register_resource("/consent/findIdsByEntity", &consent_findIdentifiersByEntity, FAMILY_URL_SENSE);

  endpoint::Consent_Identifier consent_identifier{*engine->consent};
  service.register_resource("/consent/{consentId}", &consent_identifier, FAMILY_URL_SENSE);

  endpoint::Consent_RevokeWithArray consent_revokeWithArray{*engine->consent};
  service.register_resource("/consent/revokeWithArray", &consent_revokeWithArray, FAMILY_URL_SENSE);

  endpoint::Consent_RevokeWithList consent_revokeWithList{*engine->consent};
  service.register_resource("/consent/revokeWithList", &consent_revokeWithList, FAMILY_URL_SENSE);

  endpoint::Transfer transfer{*engine->transfer};
  service.register_resource("/datatransfer", &transfer, FAMILY_URL_SENSE);

  endpoint::Transfer_CreateWithArray transfer_createWithArray{*engine->transfer};
  service.register_resource("/datatransfer/createWithArray", &transfer_createWithArray, FAMILY_URL_SENSE);

  endpoint::Transfer_CreateWithList transfer_createWithList{*engine->transfer};
  service.register_resource("/datatransfer/createWithList", &transfer_createWithList, FAMILY_URL_SENSE);

  endpoint::Transfer_FindByConsentIdentifier transfer_findByConsentIdentifier{*engine->transfer};
  service.register_resource("/datatransfer/findByConsentIdentifier", &transfer_findByConsentIdentifier, FAMILY_URL_SENSE);
  // the pesky aliases
  service.register_resource("/datatransfer/findByConsentID", &transfer_findByConsentIdentifier, FAMILY_URL_SENSE);
  service.register_resource("/datatransfer/findByConsentId", &transfer_findByConsentIdentifier, FAMILY_URL_SENSE);

  endpoint::Transfer_Identifier transfer_identifier{*engine->transfer};
  service.register_resource("/datatransfer/{datatransferId}", &transfer_identifier, FAMILY_URL_SENSE);
  
  endpoint::Subscription subscription{*engine->subscription};
  service.register_resource("/subscription", &subscription, FAMILY_URL_SENSE);

  endpoint::Subscription_FindByEntity subscription_findByEntity{*engine->subscription};
  service.register_resource("/subscription/findByEntity", &subscription_findByEntity, FAMILY_URL_SENSE);

  endpoint::Subscription_Identifier subscription_identifier{*engine->subscription};
  service.register_resource("/subscription/{subscriptionId}", &subscription_identifier, FAMILY_URL_SENSE);
  
  // There is no 'quit' method.  The service runs forever.
  // To stop it, you have to kill it, e.g., systemctl stop montara
  service.start(constants::server::BLOCKING);
}
#endiv
