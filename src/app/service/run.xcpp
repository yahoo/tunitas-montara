// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-montara/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/montara/tree/LICENSE
#divert <fpp>
namespace app::service {
  namespace package_run::body::exported { }
  using namespace package_run::body::exported;
}
#import tunitas.montara.resource
#import tunitas.string.literals
#import tunitas.montara.storage
#import langu.age
#import sys.exits.constants
#import sys.posix
namespace app::service::package_run {
  // any ambient namespaces?
  namespace body {
    using namespace tunitas::string::literals;
    namespace resource = tunitas::montara::resource;
    namespace storage = tunitas::montara::storage;
    using namespace langu::age;
    using namespace sys::exits::constants;
    using namespace sys::posix;
  }
}
#import microhttpd.path.Endpoint
#import microhttpd.router.Registration
#import microhttpd.Service
#import tunitas.montara.storage.Engine
#import nonstd.same_as
#import std.unique_ptr
namespace app::service::package_run {
  // any exported types?
  namespace body {
    using microhttpd::path::Endpoint; // [[FIXTHIS]] WATCHOUT - this is distinct from montara's Endpoint! (which is a microhttpd::Resource descendant)
    using microhttpd::router::Registration;
    using Engine = tunitas::montara::storage::Engine;
    template<typename ENGINE> requires nonstd::same_as<ENGINE, Engine> using Pointer = std::unique_ptr<ENGINE>;
    using microhttpd::Service;
  }
}
#endiv
#divert <hpp>
#import app.service.Configuration
namespace app::service::package_run::body {
  namespace exported {
    //
    // Run the service
    // There is no termination (except by SIGTERM)
    //
    // Usage:
    //
    //   Configuration cfg{...};
    //   Specification specification{...};
    //   auto parser = Parser{cfg, specification};
    //   auto parsed = parser.parse(Args{c, v});
    //   if (ok(parsed)) {
    //     throw Quitting{cfg.NAME};
    //   }
    //   run(cfg);
    //   return sys::exits::OK;
    //
    auto run(Configuration const &) -> void;
  }
  auto get_service(Configuration const &) -> Service;
  auto drop_privileges(Configuration const &) -> void;
  auto get_engine(Configuration const &) -> Pointer<Engine>;
  auto write_pidfile(Configuration const &) -> void;
  auto load_service([[inout]] Service &, [[inout]] Engine &) -> void;
  auto fly_service(Configuration const &, [[inout]] Service &) -> void;
}
#endiv
#divert <cpp>
#import app.exception.Quitting
#import app.service.constants
#import app.service.defaults
#import app.service.Pidfile
#import langu.age.q
#import microhttpd.ip.format
#import microhttpd.sys.drop_privileges
#import microhttpd.Service
#import microhttpd.service.Specification
#import std.boolalpha
#import std.cout
#import std.cerr
#import std.exception
#import std.make_shared
#import tunitas.app.exception.Aspect
#import tunitas.montara.resource.Consent
#import tunitas.montara.resource.Consent_CreateWithArray
#import tunitas.montara.resource.Consent_CreateWithList
#import tunitas.montara.resource.Consent_FindIdentifiersByEntity
#import tunitas.montara.resource.Consent_Identifier
#import tunitas.montara.resource.Consent_RevokeWithArray
#import tunitas.montara.resource.Consent_RevokeWithList
#import tunitas.montara.resource.Consent_Revoke_Identifier
#import tunitas.montara.resource.Transfer
#import tunitas.montara.resource.Transfer_CreateWithArray
#import tunitas.montara.resource.Transfer_CreateWithList
#import tunitas.montara.resource.Transfer_FindByConsentIdentifier
#import tunitas.montara.resource.Transfer_Identifier
#import tunitas.montara.resource.Subscription
#import tunitas.montara.resource.Subscription_FindByEntity
#import tunitas.montara.resource.Subscription_Identifier
#import tunitas.montara.storage.factory
#import tunitas.montara.storage.Configuration
#import sys.posix.daemon
#import sys.posix.signal
#import sys.posix.SIG
namespace app::service::package_run {
  auto body::exported::run(Configuration const &cfg) -> void {
    // https://blog.erratasec.com/2018/10/tcpip-sockets-and-sigpipe.html (tl;dr discursive; the essay is more about how smart the authors are; they are "above this")
    signal(SIG::PIPE, SIG::IGNORE); // not checking the return code ... hope it worked
    //
    auto service = get_service(cfg);
    drop_privileges(cfg);
    auto anchor = get_engine(cfg);
    write_pidfile(cfg);
    load_service(service, *anchor);
    fly_service(cfg, service);
  }
  auto body::get_service(Configuration const &cfg) -> Service {
    auto specification = microhttpd::service::Specification{};
    using namespace constants::server;
    auto with_port = cfg.service_port.value_or(defaults::SERVICE_PORT);
    debug(cfg) << "port=" << microhttpd::ip::format(with_port) << '\n';
    specification.set_debug(Switch::ON);
    specification.set_use_ipv4(Switch::ON).set_use_ipv6(Switch::ON); // this is already the default
#if 0
    specification.set_concurrency(METHOD);
    // WATCHOUT - thread-per-connection and max-threads conflict and the server will be unstartable
    // specification.set_max_threads(THREADS);
#endif
    specification.set_regex_checking(Switch::ON);
    specification.set_port(with_port);
    return microhttpd::Service{move(specification)};
  }
  auto body::get_engine(Configuration const &cfg) -> Pointer<Engine> {
    auto storage_name = cfg.storage_engine.value_or(defaults::STORAGE_ENGINE);
    debug(cfg) << "engine=" << storage_name << '\n';
    auto ordered = storage::factory().order(storage_name);
    auto const could_not = [&cfg, &storage_name](char const *verb, std::error_code ec) {
                             error(cfg)<< "could not " << verb << " storage engine '" << q(storage_name) << "' because " << ec.message() << '\n';
                             throw exception::Quitting{cfg.NAME, sys::exits::UNAVAILABLE};
                           };
    if (!ok(ordered)) {
      could_not("acquire", error_code(ordered));
    }
    auto builder = value(std::move(ordered));
    storage::Configuration configuration; // [[FIXTHIS]] load up some configuration values from service::Configuration
    auto built = builder->build(configuration);
    if (!ok(built)) {
      could_not("build", error_code(ordered));
    }
    return value(std::move(built));
  }
  auto body::load_service(Service &service, Engine &engine) -> void {
    [&service, &target=*engine.consent]{
      service.enregister(resource::Consent::registration(target));
      service.enregister(resource::Consent_CreateWithArray::registration(target));
      service.enregister(resource::Consent_CreateWithList::registration(target));
      [&service](auto r10n){
        auto also = r10n.destination;
        service.enregister(move(r10n));
        service.enregister({resource::Consent_FindIdentifiersByEntity::locator_alternate(), also});
      }(resource::Consent_FindIdentifiersByEntity::registration(target));
      service.enregister(resource::Consent_Identifier::registration(target));
      service.enregister(resource::Consent_RevokeWithArray::registration(target));
      service.enregister(resource::Consent_RevokeWithList::registration(target));
      service.enregister(resource::Consent_Revoke_Identifier::registration(target));
    }();
    [&service, &target=*engine.transfer]{
      service.enregister(resource::Transfer::registration(target));
      service.enregister(resource::Transfer_Identifier::registration(target));
      service.enregister(resource::Transfer_CreateWithArray::registration(target));
      service.enregister(resource::Transfer_CreateWithList::registration(target));
      [&service, r10n=resource::Transfer_FindByConsentIdentifier::registration(target)]{
        auto also = r10n.destination;
        service.enregister(r10n);
        service.enregister({resource::Transfer_FindByConsentIdentifier::locator_abbreviation<0>(), also});
        service.enregister({resource::Transfer_FindByConsentIdentifier::locator_abbreviation<1>(), also});
      }();
    }();
    [&service, &target=*engine.subscription]{
      service.enregister(resource::Subscription::registration(target));
      service.enregister(resource::Subscription_Identifier::registration(target));
      service.enregister(resource::Subscription_FindByEntity::registration(target));
    }();
  }
  // [[FIXTHIS]] this is copy-pasta among montara, tarwater & rockaway
  auto body::drop_privileges(Configuration const &cfg) -> void {
    if (cfg.drop_privileges.value_or(defaults::DROP_PRIVILEGES)) {
#warning [[FIXTHIS]] when implemented, convert to the use of the two-argument microhttpd::sys::drop privileges(user, group)
      auto const UNIMPLEMENTED_TWO_ARGUMENT_DROP_PRIVILEGES_USER_GROUP = true;
      auto daemon_user = cfg.daemon_user.value_or(defaults::DAEMON_USER);
      auto daemon_group = cfg.daemon_group.value_or(defaults::DAEMON_GROUP);
      auto dropped = [&cfg, daemon_user, daemon_group]{
                       using microhttpd::sys::drop_privileges;  // NOT using tunitas::app::drop(...) which does basically the same thing, sortof.
                       if (cfg.daemon_group) {
                         if (UNIMPLEMENTED_TWO_ARGUMENT_DROP_PRIVILEGES_USER_GROUP) {
                           warning(cfg) << "the daemon group will be ignored  [[FIXTHAT]] in --daemon-group=" << q(*cfg.daemon_group) << '\n';
                           notice(cfg) << "only daemon user concept is implemented\n";
                           notice(cfg) << "acting as if only --daemon-user=" << q(daemon_user) << '\n';
                         }
                         return drop_privileges(daemon_user /*daemon_group*/); // [[FIXTHIS]] ... when available call drop_privileges(daemon_user, daemon_group);
                       } else {
                         return drop_privileges(daemon_user);
                       }
                     }();
      if (fail(dropped)) {
        if (!cfg.daemon_group || UNIMPLEMENTED_TWO_ARGUMENT_DROP_PRIVILEGES_USER_GROUP) {
          error(cfg) << "could not drop privileges to " << q(daemon_user) << '\n';
        } else {
          error(cfg) << "could not drop privileges to " << q(daemon_user) << '.' << q(daemon_group) << '\n';
        }
        throw exception::Quitting{cfg.NAME, FAIL};
      }
    }
  }
  // [[FIXTHIS]] this is copy-pasta among montara, tarwater & rockaway
  auto body::write_pidfile(Configuration const &cfg) -> void try {
    Pidfile pidfile{cfg.pid_filepath, cfg.emit_pid.value_or(defaults::EMIT_PID)};
    pidfile.manual();
    auto foreground_mode = cfg.foreground_mode.value_or(defaults::FOREGROUND_MODE);
    debug(cfg) << "foreground mode = " << std::boolalpha << foreground_mode << '\n';
    if (!foreground_mode) {
      auto ized = daemon(CHDIR, CLOSE);
      if (!ok(ized)) {
        error(cfg) << "could not daemonize because " << error_code(ized).message() << '\n';
        throw exception::Quitting{cfg.NAME, sys::exits::FAIL};
      }
    }
    pidfile.emit();
    pidfile.close();
  } catch (tunitas::app::exception::Aspect const &e) {
    throw;
  } catch (std::exception const &e) {
    error(cfg) << "failed to write the pid file " << cfg.pid_filepath.value_or("stderr") << " because " << e.what() << '\n';
    throw exception::Quitting{cfg.NAME, sys::exits::FAIL};
  }
  // [[FIXTHIS]] this is copy-pasta among montara, tarwater & rockaway
  auto body::fly_service(Configuration const &cfg, Service &service) -> void {
    // There is no 'quit' method.  The service runs forever.
    // To stop it, you have to kill it, e.g., systemctl stop montara
    auto complain = [&cfg](microhttpd::Success result, microhttpd::string::Sequencez verb) {
                      auto ec = error_code(result);
                      error(cfg) << "could not " << verb << " the service because " << ec.message() << '\n';
                      notice(cfg) << "this unexpected, the error code will only provide a rudimentary explanation\n"; // good luck.
                      throw exception::Quitting{cfg.NAME, FAIL};
                    };
    if (auto launched = service.launch(service.prepare()); !good(launched)) {
      return complain(launched, "launch");
    }
    std::cerr << "running...\n";
    service.run();
    std::cerr << "waiting...\n";
    service.wait();
    std::cerr << "stopping...\n";
    service.stop();
    // If the wait returns then it means that the server is gracefully quitting..  Go with it.
  }
}
#endiv
