// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-montara/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/montara/tree/LICENSE
#divert <fpp>
namespace tests::unit::want { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::want::Fixture : public cppunit::test::Fixture {
  auto test_nonstd_Nullbuf() -> void;
  auto test_nonstd_null() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.ostringstream
#import std.unique_ptr
#import want.nonstd.Nullbuf
auto tests::unit::want::Fixture::test_nonstd_Nullbuf() -> void {
  std::ostringstream buf;
  std::unique_ptr<::want::nonstd::Nullbuf<char>> n( new ::want::nonstd::Nullbuf<char>());
  buf << "[see this]";
  static_cast<std::ios&>(buf).rdbuf(n.get()); // <----- tricky. reach up into the ios and modify the streambuf pointer of the stringstream
  buf << "[NOT SEE THIS]";
  std::string const expected("[see this]");
  std::string const actual(buf.str());
  CPPUNIT_ASSERT(expected == actual);
}
#import want.nonstd.null
auto tests::unit::want::Fixture::test_nonstd_null() -> void {
  ::want::nonstd::null buf;
  buf << "[NOT SEE THIS]";
  // and no coredumps(!)
  CPPUNIT_ASSERT(true);
}
auto tests::unit::want::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  Stream series("want");
  {
    Stream non("nonstd");
    non << call("Nullbuf", &Fixture::test_nonstd_Nullbuf)
        << call("null", &Fixture::test_nonstd_null)
      ;
    series << move(non);
  }
  return finalize(series);
}
#endiv
