// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-montara/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/montara/tree/LICENSE
#divert <fpp>
#import tunitas.montara.storage
namespace tests::unit::storage {
  namespace [[eponymous]] fixture {
    class Fixture;
    namespace library = ::tunitas::montara::storage;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
struct tests::unit::storage::fixture::Fixture : public cppunit::test::Fixture {
  auto test_usage_Factory() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tests.unit.storage.null.Fixture
#import tests.unit.storage.memory.Fixture
auto tests::unit::storage::fixture::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  Stream series("storage");
  series << []{
              auto use = Stream{"usage"};
              use << call("Factory", &Fixture::test_usage_Factory)
                  << END;
              return use;
            }()
         << add<null::Fixture>()
         << add<memory::Fixture>()
         << END;
  return finalize(series);
}
#import tunitas.montara.storage.Factory
#import tunitas.montara.storage.factory
namespace tests::unit::storage::fixture {
  auto Fixture::test_usage_Factory() -> void {
    using Subject = library::Factory;
    CPPUNIT_ASSERT(sizeof (Subject));
    auto const &subject = library::factory();
    { auto nul = subject.order("null");
      CPPUNIT_ASSERT(good(nul)); }
    { auto mem = subject.order("memory");
      CPPUNIT_ASSERT(good(mem)); }
    { auto that = subject.order("bogon");
      CPPUNIT_ASSERT(fail(that)); }
  }
}
#endiv
