// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-montara/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/montara/tree/LICENSE
#divert <fpp>
namespace tests::unit::identifier { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::identifier::Fixture : public cppunit::test::Fixture {
  auto test_to_string() -> void;
  auto test_from_chars_Outcome_Consent() -> void;
  auto test_from_chars_Outcome_Subscription() -> void;
  auto test_from_chars_Outcome_Transfer() -> void;
  auto test_from_chars_Outcome_bad() -> void;
  auto test_from_chars_result_Consent() -> void;
  auto test_from_chars_result_Subscription() -> void;
  auto test_from_chars_result_Transfer() -> void;
  auto test_from_chars_result_bad() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.literals
using namespace std::literals;
#import tunitas.montara.identifier.to_string
#import tunitas.montara.identifier.Consent
#import tunitas.montara.identifier.Subscription
#import tunitas.montara.identifier.Transfer
auto tests::unit::identifier::Fixture::test_to_string() -> void {
  using namespace ::tunitas::montara::identifier;
  auto cid = Consent(33);
  auto sid = Subscription(44);
  auto tid = Transfer(55);
  CPPUNIT_ASSERT("33"s == to_string(cid));
  CPPUNIT_ASSERT("44"s == to_string(sid));
  CPPUNIT_ASSERT("55"s == to_string(tid));
}
#import std.cerr
auto tests::unit::identifier::Fixture::test_from_chars_Outcome_Consent() -> void {
  using namespace ::tunitas::montara::identifier;
  auto fromc = from_chars<Consent>("33");
  CPPUNIT_ASSERT(ok(fromc));
  CPPUNIT_ASSERT_EQUAL(33lu, (int long unsigned)value(fromc));
}
auto tests::unit::identifier::Fixture::test_from_chars_Outcome_Subscription() -> void {
  using namespace ::tunitas::montara::identifier;
  auto froms = from_chars<Subscription>("44");
  CPPUNIT_ASSERT(ok(froms));
  CPPUNIT_ASSERT_EQUAL(44lu, (int long unsigned)value(froms));
}
auto tests::unit::identifier::Fixture::test_from_chars_Outcome_Transfer() -> void {
  using namespace ::tunitas::montara::identifier;
  auto fromt = from_chars<Transfer>("55");
  CPPUNIT_ASSERT(ok(fromt));
  CPPUNIT_ASSERT_EQUAL(55lu, (int long unsigned)value(fromt));
}
auto tests::unit::identifier::Fixture::test_from_chars_Outcome_bad() -> void {
  using namespace ::tunitas::montara::identifier;
  auto bad = from_chars<Transfer>("1a");
  CPPUNIT_ASSERT(!ok(bad));
  std::cerr << "bad because " << error_code(bad).message() << '\n';
}
#import tunitas.montara.identifier.from_chars
auto tests::unit::identifier::Fixture::test_from_chars_result_Consent() -> void {
  using namespace ::tunitas::montara::identifier;
  auto const specimen = "33"sv;
  Consent recovered;
  char const *first = &*specimen.begin();
  char const *last = &*specimen.end();
  auto result = from_chars(first, last, recovered);
  CPPUNIT_ASSERT('\0' == *result.ptr);
  CPPUNIT_ASSERT(33lu == (std::intmax_t) recovered);
}
auto tests::unit::identifier::Fixture::test_from_chars_result_Subscription() -> void {
  using namespace ::tunitas::montara::identifier;
  auto const specimen = "44"sv;
  Subscription recovered;
  char const *first = &*specimen.begin();
  char const *last = &*specimen.end();
  auto result = from_chars(first, last, recovered);
  CPPUNIT_ASSERT('\0' == *result.ptr);
  CPPUNIT_ASSERT(44lu == (std::intmax_t) recovered);
}
auto tests::unit::identifier::Fixture::test_from_chars_result_Transfer() -> void {
  using namespace ::tunitas::montara::identifier;
  auto const specimen = "55"sv;
  Subscription recovered;
  char const *first = &*specimen.begin();
  char const *last = &*specimen.end();
  auto result = from_chars(first, last, recovered);
  CPPUNIT_ASSERT('\0' == *result.ptr);
  CPPUNIT_ASSERT(55lu == (std::intmax_t) recovered);
}
auto tests::unit::identifier::Fixture::test_from_chars_result_bad() -> void {
  using namespace ::tunitas::montara::identifier;
  auto const specimen = "1a"sv;
  char const *first = &*specimen.begin();
  char const *last = &*specimen.end();
  Consent recovered;
  auto bad = from_chars(first, last, recovered);
  CPPUNIT_ASSERT('\0' != *bad.ptr);
  std::cerr << "bad because " << (int)bad.ec << '\n';
}
auto tests::unit::identifier::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  Stream series("identifier");
  series << call("to_string", &Fixture::test_to_string)
    ;
  {
    Stream fch("from_chars");
    {
      Stream out("Outcome");
      {
	Stream good("good");
	good << call("Consent", &Fixture::test_from_chars_Outcome_Consent)
	     << call("Subscription", &Fixture::test_from_chars_Outcome_Subscription)
	     << call("Transfer", &Fixture::test_from_chars_Outcome_Transfer)
	  ;
	out << move(good);
      }
      out << call("bad", &Fixture::test_from_chars_Outcome_bad)
	;
      fch << move(out);
    }
#if 7 < __GNUC__
    {
      Stream res("result");
      {
	Stream good("good");
	good << call("Consent", &Fixture::test_from_chars_result_Consent)
	     << call("Subscription", &Fixture::test_from_chars_result_Subscription)
	     << call("Transfer", &Fixture::test_from_chars_result_Transfer)
	  ;
	res << move(good);
      }
      res << call("bad", &Fixture::test_from_chars_result_bad)
	;
      fch << move(res);
    }
#endif
    series << move(fch);
  }
  return finalize(series);
}
#endiv
