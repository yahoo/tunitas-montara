// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method which is so popular nowadays.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
namespace tests::pong {
  namespace package_main {
    namespace body::exported { }
    namespace interface = body::exported;
  }
  using namespace package_main::interface;
}
#import sys.exits.constants
#import sys.time.durations.literals
namespace tests::pong::package_main {
  namespace body {
    using namespace sys::exits::constants;
    using namespace sys::time::durations::literals;
  }
}
#import sys.exits.Code
namespace tests::pong {
  namespace package_main::body {
    using Exit = sys::exits::Code;
  }
}
#endiv
#divert <hpp>
#import tests.pong.Arguments
#import std.string
#import microhttpd.ip.Port
#import ip.endian.host_order
namespace tests::pong {
  namespace package_main::body {
    inline auto const NAME = std::string{"pong"};
    inline auto const PORT = []{
                               // The port number here is magic and specific for this test.
                               constexpr auto const MAGIC = 47309u;
                               auto const HO = ::ip::endian::host_order<::ip::in::port_t>(MAGIC);
                               return microhttpd::ip::Port{HO};
                             }();
    namespace exported {
      auto main(Arguments) -> Exit;
    }
  }
}
#endiv
#divert <cpp>
#import microhttpd.Success
#import microhttpd.Service
#import microhttpd.service.Specification
#import microhttpd.Request
#import microhttpd.literals
#import nonstd.copy
#import std.clog
#import std.make_shared
#import tests.pong.pause
#import tests.pong.Pong
namespace tests::pong::package_main {
  auto interface::main(Arguments arguments) -> Exit {
    auto exe = [&arguments]() {
                 auto save = arguments.front();
                 arguments.pop_front();
                 return save;
               }();
    auto [do_pause, do_usage, bad_usage, not_empty] = [&arguments]() -> std::tuple<bool, bool, bool, bool> {
      using namespace microhttpd::literals;
      if (arguments.empty()) {
        return {false, false, false, false}; // i.e. nothing wrong with this
      } else {
        auto first = [&arguments]() {
                       auto first = arguments.front();
                       arguments.pop_front();
                       return first;
                     }();
        if (first.empty())          { return {false, false, true, false}; }
        if ('-' != first.front())   { return {false, false, false, true}; }
        if (!arguments.empty())     { return {false, false, false, true}; }
        //
        if ("--no-pause"s == first) { return {false, false, false, false}; }
        if ("--pause"s == first)    { return {true, false, false, false}; }
        if ("--usage"s == first)    { return {false, true, false, false}; }
        if ("--help"s == first)     { return {false, true, false, false}; }
        return {false, false, true, false};          
      }
    }();
    if (bad_usage) {
      std::clog << exe << ": error, that is not an option for the " << NAME << " service\n"
                << exe << ": notice, try --usage to see the options\n";
      return USAGE;
    } else if (not_empty) {
      std::clog << exe << ": error, the " << NAME << " service does not accept words beyond the options\n";
      return USAGE;
    } else if (do_usage) {
      std::clog << "usage: pong [ --no-pause | --pause | --help | --usage ]\n";
      return OK;
    } else {
      auto const pathfrag = "/ping"s;
      {
        auto const url = "http://localhost:"s + to_string(PORT) + pathfrag;
        std::cout << "call-to-action: [[do this]] try contacting the service to prove that it is running\n"
                  << "curl " << url << '\n';
      }
      auto service = []() {
                       using namespace microhttpd::service;
                       auto spec = Specification{PORT};
                       return Service{move(spec)};
                     }();
      service.enregister(nonstd::copy(pathfrag), std::make_shared<Pong>());
#if 0
      // [[FIXTHIS]] how was this testable?  Surely we should be able to test the routability of the service before running it(!?)
      {
        // try a dry run before launching the service.
        using Generator = microhttpd::event::Event<microhttpd::event::Stage::RECEIVE>;
        auto q = Generator::request(service, pathfrag);
        auto p = microhttpd::path::Path{pathfrag};
        auto r = service.route(p);
        destination(r).GET(q);
      }
#endif
      auto complain = [exe](microhttpd::Success result, microhttpd::string::Sequencez verb) {
                        auto ec = error_code(result);
                        std::clog << exe << ": error, could not " << verb << " the " << NAME << " service because " << ec.message() << '\n';
                        return FAIL;
                      };
      if (auto launched = service.launch(service.prepare()); !good(launched)) {
        return complain(launched, "launch");
      } else {
        auto exit = OK;
        // the service is running, if we quit now then the service dies.
        if (do_pause) {
          std::clog << "...pausing while the service runs in the background...\n";
          if (auto paused = pong::pause(120_sec); fail(paused)) {
            std::clog << exe << ": error, could not pause because " << error_code(paused).message() << '\n';
            exit &= FAIL; // but we must continue to try to shut down the service gracefully.
          }
        } else {
          std::clog << "...not pausing, quitting...\n";
        }
        service.wait();
        service.stop();
        return exit;
      }
    }
  }
}
#endiv
