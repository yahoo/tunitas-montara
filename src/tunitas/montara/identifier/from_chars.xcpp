// This is -*- c++ -*- in the S.C.O.L.D. stylings that are so popular these days.
#divert <hpp>
#import tunitas.montara.identifier.required.Identifier
#import tunitas.Outcome
#import std.string
// #import std.from_chars_result some day ... but not in gcc-7
namespace tunitas::montara::identifier {
  //
  // Convert from a stringy representation into an identifier
  // Handle the various vague return success and error return signatures
  // of any of std::stoi, std::stol, std::from_chars, etc.
  //
  // Usage:
  //
  //   auto cid = from_chars<Consent>("1234");
  //   auto tid = from_chars<Transfer>("1234");
  //   auto sid = from_chars<Subscription>("1234");
  //
  // The first form is for the convenience herein.
  template<required::Identifier IDENTIFIER> auto from_chars(std::string const &) -> Outcome<IDENTIFIER>;
  // The second form is effectively a direct pass-thru to std::from_chars with the same argument signature.
  // template<required::Identifier IDENTIFIER> auto from_chars(char const *first, char const *last, IDENTIFIER &value) -> std::from_chars_result;
}
#endiv
#divert <tpp>
#import std.error_code
#import std.underlying_type
#import tunitas.montara.error.Code
#if 7 < __GNUC__
namespace tunitas::montara {
  template<identifier::required::Identifier IDENTIFIER> auto identifier::from_chars(std::string const &candidate) -> Outcome<IDENTIFIER> {
    using Result = Outcome<IDENTIFIER>;
    using Underlying = typename std::underlying_type<IDENTIFIER>::type;
    Underlying potential;
    auto last = candidate.end();
    auto result = std::from_chars(candidate.begin(), last, potential);
    if (last == result.ptr) {
      return Result{IDENTIFIER(potential)};
    } else {
      // Consulting https://en.cppreference.com/w/cpp/utility/from_chars
      // and in lieu of returning Result{std::error_code{result.ec}}
      // which gives higher fidelity on the problem but is not in "our" error category.
      return Result{std::error_code{Code::NOT_AN_IDENTIFIER}};
    }
  }
  template<identifier::required::Identifier IDENTIFIER> auto from_chars(char const *first, char const *last, IDENTIFIER &value) -> std::from_chars_result {
    using Underlying = typename std::underlying_type<IDENTIFIER>::type;
    Underlying potential;
    auto last = candidate.end();
    auto result = std::from_chars(candidate.begin(), last, potential);
    if (last == result.ptr) {
      return value = IDENTIFIER(potential);
    }
    return result;
  }
}
#else
// whereas gcc-7.3.0 does not have <charconv> at all, so std::from_chars is "not a thing" (yet)
#import std.stoll
#include <cerrno>
namespace tunitas::montara {
  template<identifier::required::Identifier IDENTIFIER> auto identifier::from_chars(std::string const &candidate) -> Outcome<IDENTIFIER> {
    using Result = Outcome<IDENTIFIER>;
    std::size_t end{0};
    auto potential = std::stoll(candidate, &end);
    if (end == candidate.size()) {
      return Result{IDENTIFIER(potential)};
    } else {
      // Consulting https://en.cppreference.com/w/cpp/utility/from_chars
      // and in lieu of returning Result{std::error_code{result.ec}}
      // which gives higher fidelity on the problem but is not in "our" error category.
      return Result{std::error_code{error::Code::NOT_AN_IDENTIFIER}};
    }
  }
}
#endif
#endiv
