// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-montara/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/montara/tree/LICENSE
#divert <hpp>
#import tunitas.montara.identifier.required.Identifier
#import tunitas.Outcome
#import tunitas.string.View
#import std.string
#import std.from_chars
#import std.from_chars_result
namespace tunitas::montara::identifier {
  //
  // Convert from a stringy representation into an identifier
  // Handle the various vague return success and error return signatures
  // of any of std::stoi, std::stol, std::from_chars, etc.
  //
  // Usage:
  //
  //   auto cid = from_chars<Consent>("1234");
  //   auto tid = from_chars<Transfer>("1234");
  //   auto sid = from_chars<Subscription>("1234");
  //
  namespace package::from_chars::function {
    // The first form is for the convenience herein.
    template<required::Identifier IDENTIFIER> auto from_chars(string::View) -> Outcome<IDENTIFIER>;
    // The second form is effectively a direct pass-thru to std::from_chars with the same argument signature.
    using From_Chars_Result = std::from_chars_result;
    template<required::Identifier IDENTIFIER> auto from_chars(char const *first, char const *last, [[out]] IDENTIFIER &) -> From_Chars_Result;
  }
  using package::from_chars::function::from_chars;
}
#endiv
#divert <tpp>
#import std.error_code
#import std.underlying_type
#import tunitas.montara.error.Code
namespace tunitas::montara::identifier::package::from_chars {
  template<identifier::required::Identifier IDENTIFIER> auto function::from_chars(string::View candidate) -> Outcome<IDENTIFIER> {
    auto potential = std::underlying_type_t<IDENTIFIER>{};
    auto const first = candidate.data();
    auto const last = first + candidate.size();
    auto result = std::from_chars(first, last, potential);
    if (last == result.ptr) {
      return {IDENTIFIER(potential)};
    } else {
      // Consulting https://en.cppreference.com/w/cpp/utility/from_chars
      // and in lieu of returning Result{std::error_code{result.ec}}
      // which gives higher fidelity on the problem but is not in "our" error category.
      return {std::error_code{error::Code::NOT_AN_IDENTIFIER}};
    }
  }
  template<identifier::required::Identifier IDENTIFIER> auto function::from_chars(char const *first, char const *last, IDENTIFIER &value) -> From_Chars_Result {
    auto potential = std::underlying_type_t<IDENTIFIER>{};
    auto result = std::from_chars(first, last, potential);
    if (last == result.ptr) {
      value = IDENTIFIER(potential);
    }
    return result;
  }
}
#endiv
