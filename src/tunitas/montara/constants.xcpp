// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-montara/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/montara/tree/LICENSE
#divert <fpp>
#import tunitas.literals
#import microhttpd.http.literals
namespace tunitas::montara {
  inline namespace constants { }
  namespace constants {
    using namespace tunitas::literals;
    namespace http {
      using namespace microhttpd::http::literals;
    }
  }
}
#endiv
#divert <hpp>
#import std.string
namespace tunitas::montara::constants {
  //
  // The HTTP verbs (that we admit)
  // [[FIXTHIS]] use the definitions that are already supplied by microhttpd
  //
  namespace http {
    inline auto const CONNECT = "CONNECT"s;
    inline auto const DELETE = "DELETE"s;
    [[deprecated("you can and should spell this one correctly as DELETE")]] inline auto const DELEET = DELETE;
    [[deprecated("you can and should spell this one correctly as DELETE")]] inline auto const DULEET = DELETE;
    inline auto const GET = "GET"s;
    inline auto const HEAD = "HEAD"s;
    inline auto const OPTIONS = "OPTIONS"s;
    inline auto const POST = "POST"s;
    inline auto const PUT = "PUT"s;
    inline auto const TRACE = "TRACE"s;
    //
    // https://www.w3.org/Protocols/HTTP/HTRESP.html
    inline auto const R200_OK = 200_HTTP;
    inline auto const R201_CREATED = 201_HTTP;
    inline auto const R202_ACCEPTED = 202_HTTP;
    inline auto const R203_NON_AUTHORITATIVE_INFORMATION = 203_HTTP;
    inline auto const R204_NO_CONTENT = 204_HTTP;
    inline auto const R205_RESET_CONTENT = 205_HTTP;
    inline auto const R206_PARTIAL_CONTENT = 206_HTTP;
    inline auto const R301_MOVED_PERMANENTLY = 301_HTTP;
    inline auto const R302_FOUND = 302_HTTP;
    inline auto const R302_MOVED_TEMPORARILY = R302_FOUND;
    inline auto const R303_SEE_OTHER = 303_HTTP;
    inline auto const R307_TEMPORARY_REDIRECT = 307_HTTP;
    inline auto const R308_PERMANENT_REDIRECT = 308_HTTP;
    inline auto const R304_NOT_MODIFIED = 304_HTTP;
    inline auto const R400_BAD_REQUEST = 400_HTTP;
    inline auto const R401_UNAUTHORIZED = 401_HTTP;
    inline auto const R402_PAYMENT_REQUIRED = 402_HTTP;
    inline auto const R403_FORBIDDEN = 403_HTTP;
    inline auto const R404_NOT_FOUND = 404_HTTP;
    inline auto const R500_INTERNAL_SERVER_ERROR = 500_HTTP;
    inline auto const R501_NOT_IMPLEMENTED = 501_HTTP;
    inline auto const R502_SERVICE_TEMPORARILY_OVERLOADED = 502_HTTP;
  }
  //
  // The MIME media type for JSON text is "application/json".
  // The default encoding is UTF-8.
  // https://www.ietf.org/rfc/rfc4627.txt
  // https://www.iana.org/assignments/media-types/media-types.xhtml
  // 
  namespace mime {
    inline auto const APPLICATION_JSON = "application/json"s;
    inline auto const APPLICATION_X_WWW_FORM_URLENCODED = "application/x-www-form-urlencoded"s;
    inline auto const MULTIPART_FORM_DATA = "multipart/form-data"s;
    inline auto const TEXT_PLAIN = "text/plain"s;
    inline auto const TEXT_HTTP = "text/http"s;
  }
}
#endiv
#divert <cpp>
#warning FIXTHIS copy-pasta among montara, rockaway, tarwater and any other microhttpd++ service
#endiv
