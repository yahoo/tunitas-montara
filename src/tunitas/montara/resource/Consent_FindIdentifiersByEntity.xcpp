// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-montara/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/montara/tree/LICENSE
#divert <fpp>
namespace tunitas::montara::resource {
  //
  // The code behind the /consent/findIdsByEntity resource
  //
  // Example: TBD
  //
  // Usage:
  //
  //   resource::Consent_FindIdentifiersByEntity resource;
  //   ws.register_resource("/consent/findIdsByEntity", &resource, true);
  //   ws.start(cfg.foreground);
  //   
  class Consent_FindIdentifiersByEntity;
}
#endiv
#divert <hpp>
#import tunitas.montara.resource.aspect.Storage
#import tunitas.montara.storage.Consent
#import std.string
namespace tunitas::montara {
  namespace resource {
    using std::move;
  }
  class resource::Consent_FindIdentifiersByEntity : public microhttpd::Resource, aspect::Storage<storage::Consent> {
    struct Ancestors {
      using Resource = microhttpd::Resource;
      using Storage = aspect::Storage<storage::Consent>;
    };
  public:
    inline explicit Consent_FindIdentifiersByEntity(storage::Consent &);
    auto GET(Request const &) -> Transport;
    template<required::Storage STORAGE> inline static auto registration(STORAGE &) -> endpoint::Registration;
    inline static auto locator_primary() -> endpoint::Locator;
    inline static auto locator_alternate() -> endpoint::Locator;
  private:
    static std::string const DUMMY_DATA;
  };
}
#endiv
#divert <ipp>
namespace tunitas::montara::resource {
  Consent_FindIdentifiersByEntity::Consent_FindIdentifiersByEntity(storage::Consent &store) : Ancestors::Storage{store}  { resources::initialize_only_get(*this); }
  auto Consent_FindIdentifiersByEntity::locator_primary() -> endpoint::Locator   { return endpoint::make_locator("/consent/findIdentifiersByEntity"s); }
  auto Consent_FindIdentifiersByEntity::locator_alternate() -> endpoint::Locator { return endpoint::make_locator("/consent/findIdsByEntity"s); }
  template<required::Storage STORAGE> auto Consent_FindIdentifiersByEntity::registration(STORAGE &storage) -> endpoint::Registration { return endpoint::make_registration<Consent_FindIdentifiersByEntity>(Consent_FindIdentifiersByEntity::locator_primary(), storage); }
}
#divert <cpp>
namespace tunitas::montara::resource {
  auto Consent_FindIdentifiersByEntity::GET(Request const &request) -> Transport {
    auto filled = Optional<Transport>{};
    filters::enforce_no_query_arguments(request, filled);
    if (!filled) {
#warning [[WRITETHIS]] recover the optout from a database
      auto body = DUMMY_DATA;
      auto type = mime::APPLICATION_JSON;
      filled = render::Builder{http::R200_OK}.content_type(move(type)).body(move(body)).build();
    }
    return move(*filled);
  }
}
#endiv
