// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-montara/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/montara/tree/LICENSE
#divert <fpp>
namespace tunitas::montara::storage::memory {
  //
  // The memory storage of (data-)transfer.
  //
  // Usage:
  //
  //   See Engine
  //
  class Transfer;
}
#endiv
#divert <hpp>
#import tunitas.Outcome
#import tunitas.montara.storage.Transfer
#import tunitas.montara.storage.memory.State
#import tunitas.montara.storage.memory.aspect.Operations
#import tunitas.montara.type.Blob
class tunitas::montara::storage::memory::Transfer
  : public storage::Transfer
  , private memory::aspect::Operations<decltype(State::transfers), id::Transfer, type::Blob, Outcome<type::Blob>> {
  struct aspect {
    using Storage = storage::Transfer;
    using Operations = memory::aspect::Operations<decltype(State::transfers), id::Transfer, type::Blob, Outcome<type::Blob>>;
  };
public:
  inline explicit Transfer(State &);
  inline auto GET(id::Transfer) -> Outcome<type::Blob> override;
  auto GET(id::Consent) -> Outcome<type::Blob> override;
  inline auto GET(type::Entity const &what_is_an_entity) -> Outcome<type::Blob> override;
  inline auto PUT(id::Transfer, type::Blob) -> outcome::Success override;
  inline auto POST(type::Blob) -> outcome::Success override;
protected:
  State &state;
};
#endiv
#divert <ipp>
namespace tunitas::montara::storage::memory {
  Transfer::Transfer(State &state)
    : state{state} { }
  auto Transfer::GET(id::Transfer key) -> Outcome<type::Blob> {
    return Operations::gettie(state.exclusion, state.transfers, key);
  }
  auto Transfer::GET(type::Entity const &match) -> Outcome<type::Blob> {
    return Operations::gettie(state.exclusion, state.transfers, match);
  } 
  auto Transfer::PUT(id::Transfer key, type::Blob value) -> outcome::Success {
    return Operations::puttie(state.exclusion, state.transfers, key, std::move(value));
  }
  auto Transfer::POST(type::Blob value) -> outcome::Success {
    return Operations::postie(state.exclusion, state.transfers, std::move(value));
  } 
}
#endiv
#divert <cpp>
#import json.exception.Generic
#import std.lock_guard
#import std.move
#import tunitas.montara.storage.State
namespace tunitas::montara::storage::memory {
  auto Transfer::GET(id::Consent match) -> Outcome<type::Blob> {
    // This is not an application of Operations::gettie(...) because it must do a sequential scan
    // of the data structure searching for any where consentId equals match.
    // There is no secondary indexing capability in this reference implementation.
    using Result = Outcome<type::Blob>;
    try {
      State::mutex::Guard guard{state.exclusion};
      for (auto const &pair : state.transfers) {
	auto const candidate = id::Consent{pair.second["consentId"].asUInt64()};
	if (match == candidate) {
	  return Result{pair.second}; // yup, that's a copy
	}
      }
      return MISSING<Result>();
    } catch (json::exception::Generic const &) {
      return INVALID<Result>();
    }
  }
}
#endiv
