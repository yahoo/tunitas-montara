// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-montara/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/montara/tree/LICENSE
#divert <fpp>
namespace tunitas::montara::storage::memory {
  //
  // Implements the memory state
  //
  // The in-memory storage offers very (very) simple data structures.
  // CRUD is by the identifier.
  // Search for non-primary key is by sequential scan of the whole data structure.
  //
  // Usage: see tunitas.montara.storage.State
  //
  class State;
}
#endiv
#divert <hpp>
#import tunitas.montara.identifier.Consent
#import tunitas.montara.type.Blob
#import tunitas.montara.storage.State
#import std.ostream
#import std.map
class tunitas::montara::storage::memory::State : public storage::State {
  using Ancestor = storage::State;
public:
  inline explicit State(std::ostream &);
  using ConsentMap = std::map<id::Consent, type::Blob>;
  ConsentMap consents;
  using SubscriptionMap = std::map<id::Subscription, type::Blob>;
  SubscriptionMap subscriptions;
  using TransferMap = std::map<id::Transfer, type::Blob>;
  TransferMap transfers;
};
#endiv
#divert <ipp>
tunitas::montara::storage::memory::State::State(std::ostream &log)
  : Ancestor{log} { }
#endiv

