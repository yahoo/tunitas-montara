// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-montara/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/montara/tree/LICENSE
#divert <fpp>
namespace tunitas::montara::storage::memory {
  //
  // The memory storage of consent.
  //
  // Usage:
  //
  //   See Engine
  //
  class Consent;
}
#endiv
#divert <hpp>
#import tunitas.Outcome
#import tunitas.montara.storage.Consent
#import tunitas.montara.storage.memory.State
#import tunitas.montara.storage.memory.aspect.Operations
#import tunitas.montara.type.Blob
class tunitas::montara::storage::memory::Consent
  : public storage::Consent
  , private memory::aspect::Operations<decltype(State::consents), id::Consent, type::Blob, Outcome<type::Blob>> {
  struct Ancestors {
    using Storage = storage::Consent;
    using Operations = memory::aspect::Operations<decltype(State::consents), id::Consent, type::Blob, Outcome<type::Blob>>;
  };
public:
  inline explicit Consent(State &);
  inline auto DELEET(id::Consent) -> outcome::Success override;
  inline auto GET(id::Consent) -> Outcome<type::Blob> override;
  inline auto GET(type::Entity const &what_is_an_entity) -> Outcome<type::Blob> override;
  inline auto POST(type::Blob) -> outcome::Success override;
  inline auto PUT(id::Consent, type::Blob) -> outcome::Success override;
protected:
  State &state;
};
#endiv
#divert <ipp>
namespace tunitas::montara::storage::memory {
  Consent::Consent(State &state)
    : state{state} { }
  auto Consent::DELEET(id::Consent key) -> outcome::Success {
    return Operations::dleet(state.exclusion, state.consents, key);
  }
  auto Consent::GET(id::Consent key) -> Outcome<type::Blob> {
    return Operations::getty(state.exclusion, state.consents, key);
  }
  auto Consent::GET(type::Entity const &match) -> Outcome<type::Blob> {
    return Operations::getty(state.exclusion, state.consents, match);
  } 
  auto Consent::POST(type::Blob value) -> outcome::Success {
    return Operations::posty(state.exclusion, state.consents, std::move(value));
  } 
  auto Consent::PUT(id::Consent key, type::Blob value) -> outcome::Success {
    return Operations::putty(state.exclusion, state.consents, key, std::move(value));
  }
}
#endiv
