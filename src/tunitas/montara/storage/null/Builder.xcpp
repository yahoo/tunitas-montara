// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-montara/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/montara/tree/LICENSE
#divert <fpp>
namespace tunitas::montara::storage::null {
  //
  // Implements the null builder
  //
  //  Usage: see tunitas.montara.storage.Builder
  //
  class Builder;
}
#endiv
#divert <hpp>
#import tunitas.montara.storage.Builder
class tunitas::montara::storage::null::Builder : public storage::Builder {
  using Ancestor = storage::Builder;
public:
  auto build(Configuration const &) -> Result final;
};
#endiv
#divert <cpp>
#import tunitas.montara.storage.null.Engine
#import tunitas.montara.storage.null.State
#import tunitas.montara.storage.null.Consent
#import tunitas.montara.storage.null.Subscription
#import tunitas.montara.storage.null.Transfer
#import std.make_unique
#import std.move
#import tunitas.montara.log
auto tunitas::montara::storage::null::Builder::build(Configuration const &cfg) -> Result {
  auto result = std::make_unique<Engine>();
  std::ostream &log = cfg.get_otherwise<bool>("logging", false) ? log::err : log::nul;
  auto stateptr = std::make_unique<State>(log);
  auto &state{*stateptr};
  result->state = std::move(stateptr);
  result->consent = std::make_unique<Consent>(state);
  result->subscription = std::make_unique<Subscription>(state);
  result->transfer = std::make_unique<Transfer>(state);
  return Result{std::move(result)};
}
#endiv

