// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-montara/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/montara/tree/LICENSE
#divert <fpp>
#import std.is_same
#import std.intmax_t
#import std.string
namespace tunitas::montara::storage::required {
  //
  // A configurable type is any type that can appear as the mapped type in a Configuration
  // a.k.a. configuration::Variant
  //
  // These are the types that appear in the std::variant<...> declaration of Configuration
  // bool
  // std::intmax_t
  // std::string
  //
  // Usage:
  //
  //   template<required::Configurable TYPE> auto function(TYPE) -> ...something...
  //
  template<typename CONFIGURABLE> concept bool Configurable = 
    (std::is_same<bool, CONFIGURABLE>::value ||
     std::is_same<std::intmax_t, CONFIGURABLE>::value ||
     std::is_same<std::string, CONFIGURABLE>::value);
}
#endiv
