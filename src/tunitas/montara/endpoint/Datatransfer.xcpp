// This is -*- c++ -*- (as close to C++2a as possible)
#divert <fpp>
namespace tunitas::montara::endpoint {
  //
  // The code behind the /datatransfer endpoint
  //
  // Example: TBD
  //
  // Usage:
  //
  //   endpoint::Datatransfer resource;
  //   ws.register_resource("/datatransfer", &resource, true);
  //   ws.start(cfg.foreground);
  //   
  class Datatransfer;
}
#endiv
#divert <hpp>
class tunitas::montara::endpoint::Datatransfer : public httpserver::Resource<Datatransfer> {
public:
  Datatransfer();
  auto render_POST(Request const &, [[out]] Response **fill) -> void;
  auto render_PUT(Request const &, [[out]] Response **fill) -> void;
private:
  static std::string const DUMMY_DATA;
};
#endiv
#divert <cpp>
#import std.string_literals
#import tunitas.montara.filter
#import tunitas.montara.constants
#import tunitas.montara.resource
namespace tunitas::montara::endpoint {
  using namespace std::literals;
  using namespace constants;
  Datatransfer::Datatransfer() {
    resource::initialize_putpost(*this);
  }
  auto Datatransfer::render_POST(Request const &request, Response **fill) -> void {
    filter::enforce_no_query_parameters(request, *fill);
    if (nullptr == *fill) {
      // [[FIXTHIS]] accept the body and put it in a database or a queue (but only if it did not exist before)
      auto const &content_body = R"text(accepted)text";
      auto const code = http::R202_ACCEPTED;
      auto const &content_type = mime::TEXT_PLAIN;
      httpserver::response::Builder bob{content_body, code, content_type};
      *fill = new Response{bob};
    }
  }
  auto Datatransfer::render_PUT(Request const &request, Response **fill) -> void {
    filter::enforce_no_query_parameters(request, *fill);
    if (nullptr == *fill) {
      // [[FIXTHIS]] accept the body and put it in a database or a queue (but only if it existed before)
      auto const &content_body = R"text(accepted)text";
      auto const code = http::R200_OK;
      auto const &content_type = mime::TEXT_PLAIN;
      httpserver::response::Builder bob{content_body, code, content_type};
      *fill = new Response{bob};
    }
  }
}
#endiv
