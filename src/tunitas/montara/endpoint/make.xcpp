// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-montara/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/montara/tree/LICENSE
#divert <fpp>
namespace tunitas::montara::endpoint {
  namespace package_make {
    namespace body::exported { }
    namespace interface = body::exported;
  }
  using namespace package_make::interface;
}
namespace tunitas::montara::endpoint::package_make {
  // exported namespaces?
  namespace body {
    // body namespaces?
  }
}
#import tunitas.string.Storage
#import microhttpd.router.Registration
namespace tunitas::montara::endpoint::package_make {
  using String = string::Storage;
  using microhttpd::router::Registration;
  namespace body { }
}
#endiv
#endiv
#divert <hpp>
#import tunitas.montara.endpoint.Locator
#import tunitas.montara.endpoint.Registration
#import tunitas.montara.required.Resource
#import tunitas.montara.required.Storage
#import std.make_shared
namespace tunitas::montara::endpoint::package_make::body {
  namespace exported {
    //
    // Rhymes with std::make_unique(...), std::make_shared(...) and all those
    //
    inline auto make_locator(String prefix) -> Locator;
    inline auto make_locator(String prefix, String variable) -> Locator;
    template<typename RESOURCE, required::Storage STORAGE> requires required::Resource<RESOURCE, STORAGE> inline auto make_registration(Locator, STORAGE &) -> Registration;
    template<typename RESOURCE, required::Storage STORAGE> requires required::Resource<RESOURCE, STORAGE> inline auto make_registration(String prefix, STORAGE &) -> Registration;
    template<typename RESOURCE, required::Storage STORAGE> requires required::Resource<RESOURCE, STORAGE> inline auto make_registration(String prefix, String variable, STORAGE &) -> Registration;
  }
  using std::make_shared;
  inline auto embracket(String const &prefix, String const &variable) -> String;
}
#endiv
#divert <ipp>
namespace tunitas::montara::endpoint::package_make {
  auto interface::make_locator(String prefix) -> Locator                  { return Locator{Locator::COMPLETE, move(prefix), Locator::STRING}; }
  auto interface::make_locator(String prefix, String variable) -> Locator { return Locator{Locator::COMPLETE, embracket(prefix, variable), Locator::STRING}; }
  template<typename RESOURCE, required::Storage STORAGE> requires required::Resource<RESOURCE, STORAGE> auto interface::make_registration(Locator locator, STORAGE &storage) -> Registration                { return {move(locator), make_shared<RESOURCE>(storage)}; }
  template<typename RESOURCE, required::Storage STORAGE> requires required::Resource<RESOURCE, STORAGE> auto interface::make_registration(String prefix, STORAGE &storage) -> Registration                  { return {make_locator(move(prefix)), make_shared<RESOURCE>(storage)}; }
  template<typename RESOURCE, required::Storage STORAGE> requires required::Resource<RESOURCE, STORAGE> auto interface::make_registration(String prefix, String variable, STORAGE &storage) -> Registration { return {make_locator(move(prefix), move(variable)), make_shared<RESOURCE>(storage)}; }
  auto body::embracket(String const &prefix, String const &variable) -> String { return prefix + "/{"s + variable + "}"s; }
}
#endiv
