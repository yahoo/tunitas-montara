// This is -*- c++ -*- in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-montara/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::montara::endpoint {
  //
  // The code behind the /consent endpoint
  // Reminder: /consent/{consentId} is nearby in class Consent_Identifier
  //
  // Example: TBD
  // 
  // Usage:
  //
  //   endpoint::Consent resource;
  //   ws.register_resource("/consent", &resource, true);
  //   ws.start(cfg.foreground);
  //   
  class Consent;
}
#endiv
#divert <hpp>
#import tunitas.montara.endpoint.aspect.Operations
#import tunitas.montara.endpoint.aspect.Storage
#import tunitas.montara.identifier.Consent
#import tunitas.montara.storage.Consent
class tunitas::montara::endpoint::Consent
  : public httpserver::Resource<Consent>
  , protected aspect::Storage<storage::Consent>
  , protected aspect::Operations<identifier::Consent, storage::Consent> {
  struct ancestors {
    using Resource = httpserver::Resource<Consent>;
    using Storage = aspect::Storage<storage::Consent>;
    using Operations = aspect::Operations<identifier::Consent, storage::Consent>;
  };
public:
  inline explicit Consent(storage::Consent &);
  inline auto render_POST(Request const &, [[out]] Response *&fill) -> void;
public: // but we wish it wasn't; we wish it wasn't even here [[REMOVEWHEN]] libhttpserver has an appropriate function signature
  inline auto render_POST(Request const &r, [[out]] Response **f) -> void { render_POST(r, *f); }
};
#endiv
#divert <ipp>
#import tunitas.montara.resources
namespace tunitas::montara::endpoint {
  Consent::Consent(storage::Consent &store) : ancestors::Storage{store} {
    resources::initialize_only_post(*this);
  }
  auto Consent::render_POST(Request const &request, Response *&fill) -> void {
    posty(request, fill, store);
  }
}
#endiv
