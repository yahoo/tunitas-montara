// This is -*- c++ -*- (as close to C++2a as possible)
#divert <fpp>
namespace tunitas::montara::endpoint {
  //
  // The code behind the /consent endpoint
  //
  // Example: TBD
  // 
  // Usage:
  //
  //   endpoint::Consent resource;
  //   ws.register_resource("/consent", &resource, true);
  //   ws.start(cfg.foreground);
  //   
  class Consent;
}
#endiv
#divert <hpp>
#import tunitas.montara.storage.Consent
class tunitas::montara::endpoint::Consent : public httpserver::Resource<Consent> {
public:
  explicit Consent(storage::Consent &);
  auto render_POST(Request const &, [[out]] Response *&fill) -> void;
public: // but we wish it wasn't; we wish it wasn't even here [[REMOVEWHEN]] libhttpserver has an appropriate function signature
  auto render_POST(Request const &r, [[out]] Response **f) -> void { render_POST(r, *f); }
protected:
  storage::Consent &store;
};
#endiv
#divert <cpp>
#import tunitas.montara.endpoint.implementation
namespace tunitas::montara::endpoint {
  using namespace std::literals;
  using namespace constants;
  Consent::Consent(storage::Consent &store) : store{store} {
    resources::initialize_only_post(*this);
  }
  auto Consent::render_POST(Request const &request, Response *&fill) -> void try {
    filters::enforce_no_query_parameters(request, fill);
    filters::enforce_application_json(request, fill);
    if (nullptr == fill) {
      json::String document = json::to(json::STRING(), request.get_content());
      auto parsed = json::parse(json::failure::returned, document);
      if (!ok(parsed)) {
        responses::bad_request(fill, "json syntax");
      } else {
        store.POST(value(std::move(parsed)));
        // [[FIXTHIS]] accept the body and put it in a database or a queue (but only if there wasn't any before)
        auto const &content_body = R"text(accepted)text";
        auto const code = http::R202_ACCEPTED;
        auto const &content_type = mime::TEXT_PLAIN;
        httpserver::response::Builder bob{content_body, code, content_type};
        fill = new Response{bob};
      }
    }
  } catch (std::exception const &e) {
    responses::internal_server_error(fill, e.what());
  } catch (...) {
    responses::internal_server_error(fill);
  }
}
#endiv
