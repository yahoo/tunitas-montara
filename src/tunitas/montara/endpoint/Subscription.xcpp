// This is -*- c++ -*- (as close to C++2a as possible)
#divert <fpp>
namespace tunitas::montara::endpoint {
  //
  // The code behind the /subscription endpoint
  //
  // Example: TBD
  //
  // Usage:
  //
  //   endpoint::Subscription resource;
  //   ws.register_resource("/subscription", &resource, true);
  //   ws.start(cfg.foreground);
  //   
  class Subscription;
}
#endiv
#divert <hpp>
#import std.string
#import tunitas.montara.endpoint.aspect.Storage
#import tunitas.montara.storage.Subscription
class tunitas::montara::endpoint::Subscription : public httpserver::Resource<Subscription>, aspect::Storage<storage::Subscription> {
  struct ancestors {
    using Resource = httpserver::Resource<Subscription>;
    using Storage = aspect::Storage<storage::Subscription>;
  };
  using ancestor = httpserver::Resource<Subscription>;
public:
  explicit Subscription(storage::Subscription &);
  auto render_POST(Request const &, [[out]] Response **fill) -> void;
};
#endiv
#divert <cpp>
#import std.string_literals
#import tunitas.montara.filters
#import tunitas.montara.constants
#import tunitas.montara.resources
namespace tunitas::montara::endpoint {
  using namespace constants;
  using namespace std::literals;
  Subscription::Subscription(storage::Subscription &store) : ancestors::Storage{store} {
    resources::initialize_only_post(*this);
  }
  auto Subscription::render_POST(Request const &request, Response **fill) -> void {
    filters::enforce_no_query_parameters(request, *fill);
    if (nullptr == *fill) {
      // [[FIXTHIS]] accept the body and put it in a database or a queue
      auto const &content_body = R"text(accepted)text"s;
      auto const code = http::R202_ACCEPTED;
      auto const &content_type = mime::TEXT_PLAIN;
      httpserver::response::Builder bob{content_body, code, content_type};
      *fill = new Response{bob};
    }
  }
}
#endiv
