// This is -*- c++ -*- (as close to C++2a as possible)
#divert <fpp>
namespace tunitas::montara::endpoint {
  //
  // The code behind the /consent/revoke/{consentId} endpoint
  //
  // POSTing to this endpoint does a DELETE on the storage for the referenced consent record.
  // The consent is gone.
  // In an alternative implementation, a consent revocation would be *recorded* and cached
  // record of revocation would be written into immutability; revocation of consent being a permanent mark.
  //
  // Protocol question for API v2, why not just surface DELETE as a verb against /consent/{consentId}.
  //
  // Example: TBD
  //
  // Usage:
  //
  //   endpoint::Consent_Revoke_Identifier resource;
  //   ws.register_resource("/consent/revoke/{consentId}", &resource, true);
  //   ws.start(cfg.foreground);
  //   
  class Consent_Revoke_Identifier;
}
#endiv
#divert <hpp>
#import tunitas.montara.endpoint.aspect.Operations
#import tunitas.montara.endpoint.aspect.Storage
#import tunitas.montara.identifier.Consent
#import tunitas.montara.storage.Consent
class tunitas::montara::endpoint::Consent_Revoke_Identifier
  : public httpserver::Resource<Consent_Revoke_Identifier>
  , protected aspect::Storage<storage::Consent>
  , protected aspect::Operations<identifier::Consent, storage::Consent> {
  struct ancestors {
    using Resource = httpserver::Resource<Consent_Revoke_Identifier>;
    using Storage = aspect::Storage<storage::Consent>;
    using Operations = aspect::Operations<identifier::Consent, storage::Consent>;
  };
public:
  inline explicit Consent_Revoke_Identifier(storage::Consent &);
  inline auto render_POST(Request const &, [[out]] Response *&fill) -> void;
public: // but we wish it wasn't; we wish it wasn't even here [[REMOVEWHEN]] libhttpserver has an appropriate function signature
  inline auto render_POST(Request const &r, [[out]] Response **f) -> void { render_POST(r, *f); }
protected:
  // [[FIXTHIS]] construct the URL in run.cpp so that these to guarantee to match
  // this must match the name used in run.cpp -----------\ (here)
  //                                                     |
  //                                                     |
  //                                                     v
  inline static auto const PARAMETER_NAME = std::string{"consentId"};
};
#endiv
#divert <ipp>
#import std.string_literals
#import tunitas.montara.filters
#import tunitas.montara.constants
#import tunitas.montara.resources
namespace tunitas::montara::endpoint {
  using namespace constants;
  using namespace std::literals;
  Consent_Revoke_Identifier::Consent_Revoke_Identifier(storage::Consent &store) : ancestors::Storage{store}  {
    resources::initialize_only_post(*this);
  }
  auto Consent_Revoke_Identifier::render_POST(Request const &request, Response *&fill) -> void {
    dleet(request, fill, store, PARAMETER_NAME);
  }
}
#endiv
