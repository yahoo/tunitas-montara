// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-montara/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/montara/tree/LICENSE
#divert <fpp>
namespace tunitas::montara::endpoint {
  //
  // The code behind the /consent/{ID} endpoint
  //
  // Example: TBD
  //
  // Usage:
  //
  //   endpoint::Consent_Identifier resource;
  //   ws.register_resource("/consent/{ID}", &resource, true);
  //   ws.start(cfg.foreground);
  //   
  class Consent_Identifier;
}
#endiv
#divert <hpp>
#import std.string
#import tunitas.montara.endpoint.aspect.Operations
#import tunitas.montara.endpoint.aspect.Storage
#import tunitas.montara.identifier.Consent
#import tunitas.montara.storage.Consent
class tunitas::montara::endpoint::Consent_Identifier
  : public httpserver::Resource<Consent_Identifier>
  , protected aspect::Storage<storage::Consent>
  , protected aspect::Operations<identifier::Consent, storage::Consent> {
  struct ancestors {
    using Resource = httpserver::Resource<Consent_Identifier>;
    using Storage = aspect::Storage<storage::Consent>;
    using Operations = aspect::Operations<identifier::Consent, storage::Consent>;
  };
public:
  inline explicit Consent_Identifier(storage::Consent &);
  inline auto render_GET(Request const &, [[out]] Response *&fill) -> void;
  inline auto render_PUT(Request const &, [[out]] Response *&fill) -> void;
public: // but we wish it wasn't; we wish it wasn't even here [[REMOVEWHEN]] libhttpserver has an appropriate function signature
  inline auto render_GET(Request const &r, [[out]] Response **f) -> void { render_GET(r, *f); }
  inline auto render_PUT(Request const &r, [[out]] Response **f) -> void { render_PUT(r, *f); }
protected:
  // [[FIXTHIS]] construct the URL in run.cpp so that these to guarantee to match
  // this must match the name used in run.cpp -----------\ (here)
  //                                                     |
  //                                                     |
  //                                                     v
  inline static auto const PARAMETER_NAME = std::string{"consentId"};
};
#endiv
#divert <ipp>
#import tunitas.montara.resources
namespace tunitas::montara::endpoint {
  Consent_Identifier::Consent_Identifier(storage::Consent &store) : ancestors::Storage{store} {
    resources::initialize_getput(*this);
  }
  auto Consent_Identifier::render_GET(Request const &request, Response *&fill) -> void {
    getty(request, fill, store, PARAMETER_NAME);
  }
  auto Consent_Identifier::render_PUT(Request const &request, Response *&fill) -> void {
    putty(request, fill, store, PARAMETER_NAME);
  }
}
#endiv
